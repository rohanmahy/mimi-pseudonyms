



More Instant Messaging Interoperability                          R. Mahy
Internet-Draft                            Rohan Mahy Consulting Services
Intended status: Informational                            15 August 2024
Expires: 16 February 2025


       Some pseudonymous privacy flows for More Instant Messaging
                        Interoperability (MIMI)
                   draft-mahy-mimi-pseudonyms-latest

Abstract

   TODO Abstract

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://rohanmahy.github.io/mimi-pseudonyms/draft-mahy-mimi-
   pseudonyms.html.  Status information for this document may be found
   at https://datatracker.ietf.org/doc/draft-mahy-mimi-pseudonyms/.

   Discussion of this document takes place on the More Instant Messaging
   Interoperability Working Group mailing list (mailto:mimi@ietf.org),
   which is archived at https://mailarchive.ietf.org/arch/browse/mimi/.
   Subscribe at https://www.ietf.org/mailman/listinfo/mimi/.

   Source for this draft and an issue tracker can be found at
   https://github.com/rohanmahy/mimi-pseudonyms.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 16 February 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  What is needed
     3.1.  Spam and Abuse prevention
   4.  Example flows
     4.1.  Connection flow
     4.2.  Join link flow
     4.3.  Knock flow
   5.  Connection request message format
   6.  Implications with explicit consent mechanism
   7.  Security Considerations
   8.  IANA Considerations
   9.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   There are several possible ways of using pseudonyms that are
   compatible with the MIMI protocol.  This document includes three
   specific flows.  Other flows and other metadata privacy mechanisms
   are possible, some of which also use pseudonyms.

   The flows described here include the a connection flow, an out-of-
   band join link flow, and a knock flow.  A very high level summary of
   each flow follows.

   Connection flow:

   *  Each party obtains (typically single-use) pseudonyms

   *  Alice finds Bob, and connects with him from one of her pseudonyms

   *  Alice reveals her actual identity to Bob inside an end-to-end
      encrypted channel, and provides a second pseudonym

   *  Bob connects to Alice from one of his pseudonyms to Alice's second
      pseudonym.

   Since the last step is based on a human delay which could vary from
   seconds to years, the timing would be difficult to correlate between
   a pair of providers with a large volume of traffic.  If either
   provider has a very small number of users, either provider could use
   traffic analysis to associate the second room with Bob.

   Out-of-band link flow:

   *  create a room link

   *  distribute the link out-of-band

   *  get the groupinfo using the link

   *  join the room

   *  optionally reveal the "real" identity inside the room

   Knock flow:

   *  a new users Cathy wants to join an established room. she uses a
      pseudonym to externally join the associated "knock" room.

   *  Cathy provides a second pseudonym and KeyPackage inside the "knock
      room", and immediately leaves the room

   *  later, an administrator of the room decides to add Cathy to the
      room using the KeyPackage provided by Cathy.

   This flow is substantially like the connection flow, except that
   Cathy immediately leaves the "knock room", and the administrator adds
   Cathy to an existing room (vs.  Bob creating a new room).

   Note: move down.  knock room allows external joiners write only and
   maybe autoremoves after a few seconds.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  What is needed

   Out of scope:

   *  A way for clients to obtain pseudonyms from their own providers

   *  Rate limiting pseudonym creation on a local provider

   *  Correlating pseudonyms with an account on a local provider (may of
      may not be possible)

   In scope:

   *  A way to indicate a KeyPackage is only valid for initial
      connections

   *  A way for MIMI entities to recognize pseudonyms

   *  A way to examine the room policy about pseudonyms (required,
      optional, forbidden)

   *  A way to present additional credentials or disclosures of
      selective disclosure credentials inside a room

3.1.  Spam and Abuse prevention

   Detection

   Remedy

4.  Example flows

4.1.  Connection flow

   Initially Alice and Bob both request a number of pseudonyms (and
   associated MLS credentials).  They may upload KeyPackages for these
   pseudonyms.

   ClientA1       ServerA         ServerB         ClientB*
     |               |               |               |
     | Request       |               | Request       |
     | pseudonyms    |               | pseudonyms    |
     +~~~~~~~~~~~~~~>|               |<~~~~~~~~~~~~~~+
     |<~~~~~~~~~~~~~~+               +~~~~~~~~~~~~~~>|
     |               |               |               |
     |     Store KPs |               |     Store KPs |
     +~~~~~~~~~~~~~~>|               |<~~~~~~~~~~~~~~+
     |               |               |               |
     |      ...      | time passes   |      ...      |
     |               |               |               |

   Alice decides to connect to Bob. She creates a room in which to
   bootstrap her private connection with Bob. She uses one of her
   pseudonyms as her identifier in the new room.  Alice searches for Bob
   using his handle identifier.  She requests KeyPackages for Bob's real
   identity.  Note that she may need consent to fetch his KeyPackages
   (not shown), or Bob may grant blanket consent for connection rooms.
   Alice adds Bob and Welcomes him to the new temporary room.

   Alice now sends Bob an application message revealing her actual
   identity, another of her pseudonyms, and optionally a list of her
   KeyPackages from that pseudonym.  In all likelihood, the user Bob
   would not be presented with any indication that Alice wants to
   connect until this point.

   ClientA1       ServerA         ServerB         ClientB*
     |               |               |               |
     | Create room   |               |               |
     +~~~~~~~~~~~~~~>|               |               |
     | Add Alice's   |               |               |
     | other clients |               |               |
     +~~~~~~~~~~~~~~>|               |               |
     |               | /idQuery      |               |
     |               +-------------->|               |
     |               |        200 OK |               |
     |               |<--------------+               |
     | Request KPs   |               |               |
     +~~~~~~~~~~~~~~>| /keyMaterial  |               |
     |               +-------------->|               |
     |               |        200 OK |               |
     |   connect KPs |<--------------+               |
     |<~~~~~~~~~~~~~~+               |               |
     |               |               |               |
     | Commit, etc.  |               |               |
     +~~~~~~~~~~~~~~>|               |               |
     |      Accepted | /notify       |               |
     |<~~~~~~~~~~~~~~+-------------->|               |
     |               |        200 OK | Welcome, Tree |
     |      Message  |<--------------+~~~~~~~~~~~~~~>|
     +~~~~~~~~~~~~~~>|               |               |
     |               | /notify       |               |
     |               +-------------->|               |
     |               |        200 OK |               |
     |               |<--------------+               |
     |               |               | AliceID, KPs  |
     |               |               +~~~~~~~~~~~~~~>|
     |               |               |               |
     |      ...      | time passes   |      ...      |
     |               |               |               |

   At some point, Bob accepts Alice's connection request.  Bob creates a
   new room using one of his pseudonyms.  Bob adds Alice's clients to
   the room using the provided KeyPackages.  Bob can also add the rest
   of his clients at the same time, assuming that Bob has a way to get
   KeyPackages securely among his clients.  Bob then sends a message to
   Alice.  The hub sees a room between two pseudonyms.

   ClientA1       ServerA         ServerB         ClientB*
     |               |               |               |
     |               |               |               | Bob
     |               |               |   Create room | accepts
     |               |               |<~~~~~~~~~~~~~~+
     |               |               |               |
     |               |               | Commit, etc.  |
     |               |               |<~~~~~~~~~~~~~~+
     |               |       /notify |               |
     | Welcome, Tree |<--------------+               |
     |<~~~~~~~~~~~~~~+               |  Message      |
     |               |       /notify |<~~~~~~~~~~~~~~+
     | Message       |<--------------+               |
     |<~~~~~~~~~~~~~~+               |               |
     |               |               |               |

   Alice eventually destroys the bootstrap room after a random delay.
   (Not shown.)

   Alice and Bob can add each other to additional rooms by sending an
   "invite" application message.

4.2.  Join link flow

   ClientA1       ServerA         ServerB         ClientB*
     |               |               |               |
     | Create room   |               |               |
     +~~~~~~~~~~~~~~>|               |               |
     | Add Alice's   |               |               |
     | other clients |               |               |
     +~~~~~~~~~~~~~~>|               |               |
     | Create join   |               |               |
     | link          |               |               |
     +~~~~~~~~~~~~~~>|               |               |
     |               | Send join     |               |
     |               | link OOB      |               |
     +==============================================>|
     |               |               |               |
     |      ...      | time passes   |      ...      |
     |               |               |               |

   As in the previous flow, Bob needs to collect KeyPackages from his
   other clients and add them to the room.

   ClientA1       ServerA         ServerB         ClientB*
     |               |               |               |
     |               |               |               | Bob uses
     |               |               | Use join link | join link
     |               |               |<~~~~~~~~~~~~~~+
     |               |    /groupInfo |               |
     |               |<--------------+               |
     |               | OK  GroupInfo |               |
     |               |-------------->+ GroupInfo     |
     |               |               +~~~~~~~~~~~~~~>|
     |               |               | Commit, etc.  |
     |               |               |<~~~~~~~~~~~~~~+
     |               |       /notify |               |
     | Commit        |<--------------+               |
     |<~~~~~~~~~~~~~~+               |  Message      |
     |               |       /notify |<~~~~~~~~~~~~~~+
     | Message       |<--------------+               |
     |<~~~~~~~~~~~~~~+               |               |
     |               |               |               |

4.3.  Knock flow

   A new user Cathy is aware of a room that she wants to join.  Likely
   there is web page for the room with instructions for joining.  The
   page includes a related "knock room" which contains the moderators or
   administrators of the target room.  The "knock room" can be joined by
   anyone, but by default each joiner can send one message to the admins
   while regular users never receive application messages sent to the
   group (although the client has the keying material needed to decrypt
   the ciphertext if they receive it.)

   Cathy sends a message with her KeyPackages for one of her pseudonyms.

   ClientA1       ServerA         ServerC         ClientC*
     |               |               |               |
     |               |               |               | Cathy finds
     |               |               |               | "knock room"
     |               |               | get GroupInfo |
     |               |               |<~~~~~~~~~~~~~~+
     |               |    /groupInfo |               |
     |               |<--------------+               |
     |               | OK  GroupInfo |               |
     |               |-------------->+ GroupInfo     |
     |               |               +~~~~~~~~~~~~~~>|
     |               |               | Commit, etc.  |
     |               |               |<~~~~~~~~~~~~~~+
     |               |       /notify |               |
     | Commit        |<--------------+               |
     |<~~~~~~~~~~~~~~+               | App Message:  |
     |               |               | Knock, KPs    |
     |               |       /notify |<~~~~~~~~~~~~~~+
     | Knock, KPs    |<--------------+               |
     |<~~~~~~~~~~~~~~+               | Remove        |
     |               |               | Proposals     | Cathy removes
     |               |               |<~~~~~~~~~~~~~~+ herself
     | Remove        |<--------------+               |
     |<~~~~~~~~~~~~~~+               |               |
     |               |               |               |
     |      ...      | time passes   |      ...      |
     |               |               |               |

   An administrator of the target room decides to add Cathy using the
   KeyPackages she provided in the (related) "knock room".

   ClientA1       ServerA         ServerC         ClientC*
     |               |               |               |
     | Commit, etc.  |               |               |
     +~~~~~~~~~~~~~~>|               |               |
     |      Accepted | /notify       |               |
     |<~~~~~~~~~~~~~~+-------------->|               |
     |               |        200 OK | Welcome, Tree |
     |               |<--------------+~~~~~~~~~~~~~~>|
     |               |               |               |

5.  Connection request message format

   TODO

   Invite format

6.  Implications with explicit consent mechanism

   In many of the flows in this document, one user provides another with
   a KeyPackage.  In many cases the KeyPackages will be valid for
   several weeks or months and most new rendezvous will be realized
   during that time.  However if a KeyPackage expires, the other party
   may need explicit consent to fetch a new KeyPackage to replace the
   expired one.

7.  Security Considerations

   TODO Security

8.  IANA Considerations

   This document has no IANA actions.

9.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Rohan Mahy
   Rohan Mahy Consulting Services
   Email: rohan.ietf@gmail.com
